package org.netbeans.gpx.visual;

import org.netbeans.gpx.model.Selection;
import org.netbeans.gpx.model.entity.Waypoint;
import java.util.Collection;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays elevation profile.
 */
@ConvertAsProperties(
    dtd = "-//org.netbeans.gpx.visual//Elevation//EN",
autostore = false)
@TopComponent.Description(
    preferredID = "ElevationTopComponent",
iconBase = "org/netbeans/gpx/visual/resources/elevation.gif",
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "navigator", openAtStartup = false)
@ActionID(category = "Window", id = "org.netbeans.gpx.visual.ElevationTopComponent")
@ActionReference(path = "Menu/Window/GPX" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
    displayName = "#CTL_ElevationAction",
preferredID = "ElevationTopComponent")
@Messages({
    "CTL_ElevationAction=Elevation",
    "CTL_ElevationTopComponent=Elevation Window",
    "HINT_ElevationTopComponent=This is a Elevation window"
})
public final class ElevationTopComponent extends TopComponent implements LookupListener {
    
    private static final long serialVersionUID = -7900084742185260837L;

    private Lookup.Result<Waypoint> result;

    public ElevationTopComponent() {
        initComponents();
        setName(Bundle.CTL_ElevationTopComponent());
        setToolTipText(Bundle.HINT_ElevationTopComponent());

    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        result = Selection.INSTANCE.getLookup().lookupResult(Waypoint.class);
        result.allItems();
        result.addLookupListener(this);
    }

    @Override
    public void componentClosed() {
        result.removeLookupListener(this);
        result = null;
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public void resultChanged(LookupEvent le) {
        Collection<? extends Waypoint> points = result.allInstances();

        if (!points.isEmpty()) {
            StringBuilder builder = new StringBuilder();
            for (Waypoint p : points) {
                builder.append("Elevation: ").append(p.getEle()).append("\n");
            }

            Logger.getLogger(getClass().getName()).log(Level.INFO, builder.toString());
        }
    }
}
