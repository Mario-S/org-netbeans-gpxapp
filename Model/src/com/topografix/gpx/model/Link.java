//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2012.03.08 at 11:55:13 AM CET 
//
package com.topografix.gpx.model;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;

/**
 * 
 * 	 A link to an external resource (Web page, digital photo, video clip, etc) with additional information.
 *     
 * 
 * <p>Java class for linkType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="linkType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="text" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="type" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *       &lt;/sequence>
 *       &lt;attribute name="href" use="required" type="{http://www.w3.org/2001/XMLSchema}anyURI" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "linkType", propOrder = {
    "text",
    "type"
})
public class Link implements GpxModel {

    protected String text;
    protected String type;
    @XmlAttribute(name = "href", required = true)
    @XmlSchemaType(name = "anyURI")
    protected String href;

    /**
     * Default constructor
     */
    public Link() {
    }

    public Link(String text, String type, String href) {
        this.text = text;
        this.type = type;
        this.href = href;
    }

    /**
     * copy constructor
     * @param other 
     */
    public Link(Link other) {
        this(other.getText(), other.getType(), other.getHref());
    }

    /**
     * Gets the value of the text property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getText() {
        return text;
    }

    /**
     * Sets the value of the text property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setText(String value) {
        this.text = value;
    }

    /**
     * Gets the value of the type property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getType() {
        return type;
    }

    /**
     * Sets the value of the type property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setType(String value) {
        this.type = value;
    }

    /**
     * Gets the value of the href property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getHref() {
        return href;
    }

    /**
     * Sets the value of the href property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setHref(String value) {
        this.href = value;
    }

    @Override
    public boolean equals(Object o) {
        boolean equal = false;

        if (this == o) {
            equal = true;
        } else if (o instanceof Link) {
            Link other = (Link) o;
            EqualsBuilder builder = new EqualsBuilder();
            builder.append(text, other.getText()).append(href, other.getHref()).
                    append(type, other.getType());
            equal = builder.isEquals();
        }

        return equal;
    }

    @Override
    public int hashCode() {
        
        HashCodeBuilder builder = new HashCodeBuilder();
        return builder.append(text).append(href).append(type).hashCode();
    }

    @Override
    public boolean hasContent() {
        return ((text != null && !text.isEmpty())
                || (href != null && !href.isEmpty())
                || (type != null && !type.isEmpty()));
    }
}
